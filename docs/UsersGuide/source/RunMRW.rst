.. _run-mrw:

************************************************
Run the Medium-Range Weather (MRW) Application 
************************************************

.. attention::

   This section assumes that the user has already built the MRW App. If this is **not** the case, see :numref:`Chapter %s <build-mrw>` for instructions on how to build the App. 

The Unified Forecast System (:term:`UFS`) Medium-Range Weather (MRW) Application can be run in coupled or uncoupled mode. :numref:`Chapter %s <uncoupled-mode>` describes how to run a forecast in :term:`uncoupled` mode (atmosphere-only), and :numref:`Chapter %s <coupled-mode>` describes how to run a forecast in :term:`coupled` mode. 

The steps required for generating an experiment are as follows:

   * :ref:`Download and stage data <get-data>`
   * :ref:`Generate the workflow experiment <expt-gen>`
   * :ref:`Run the workflow <run-workflow>` 
   * :ref:`Optional: Plot the output <plot-output>`
   
..   
   * :ref:`Generate a regional workflow experiment <GenerateForecast>`
      * :ref:`Configure the experiment parameters <UserSpecificConfig>`
      * :ref:`Load the python environment for the regional workflow <SetUpPythonEnv>`

..
   COMMENT: If time, create workflow image as in SRW _static/FV3LAM_wflow_overall.png file. 
..
   COMMENT: Edit section to make it MRW-specific!!! Thus far just copy-pasted from SRW. 


.. _get-data:

===============================
Download and Stage the Data
===============================

The MRW App requires input files to run. These include static datasets, initial and boundary conditions files, and model configuration files. On Level 1 and 2 systems, the data required to run MRW App tests are already available. For Level 3 and 4 systems, the data must be added. Detailed instructions on how to add the data can be found in :numref:`Section %s Downloading and Staging Input Data <downloading_input_data>`. :numref:`Sections %s <input>` and :numref:`%s <output>` contain useful background information on the input and output files used in the MRW App.

..
   COMMENT: Edit to reflect MRW reality, not SRW. e.g., are IC/LBCs required?
   Pull raw GFS files 
   Info on chgres https://epic-documentation.readthedocs.io/en/latest/ufs_utils.html 




.. _uncoupled-mode:

=============================
Running in Uncoupled Mode
=============================





.. _coupled-mode:

==========================
Running in Coupled Mode
==========================

















.. _expt-gen:

Generate the Forecast Experiment
===================================



Create a ``COMROT`` and ``EXPDIR``. The experiment and workflow set-up scripts in following steps will point to these paths. Initial conditions will also need to be placed in ``COMROT``.

# Make these dirs in directory above mrw dir

.. code-block:: console

   mkdir COMROT EXPTDIR (for uncoupled)
   mkdir COMROT EXPTDIR ICSDIR HOMEDIR (for coupled - HOMEDIR is optional)

HOMEDIR holds files generated by expt (archives)
EXPTDIR holds all config files created by expt, plus crontab & xml files --> can modify config.base 
COMROT --> must put ICs into this directory for uncoupled. For coupled, no. COMROT also contains outputs and other stuff during the runs. (non-scrubbed output)

(generate components (from setup_expts.py, then generate experiments)

Go to to ``ush/rocoto`` dir. 

Run ``./setup_expt.py`` to set up the expt. 
- No DA, so do ``forecast-only`` argument. 
- ``--pslot``
- YYYYMMDDHH_test (expt name)
- idate and edate must be the same for forecast only expts (rather than DA)--> even tho it starts from start end day. Should correspond to start date. 
- ``--app`` argument is optional. (Check setup_expt.py for the options.)
- --resdet 384 --> what resolution to run at? For coupled, only 384 is supported. For uncoupled all res < 768 are supported. 
- cold start is default. warm start is if you have data from past experiment. 

For "free-forecast" aka uncoupled/atmoshere only: 
./setup_expt.py forecast-only --pslot 2013100100_test --idate 2013100100 --edate 2013100100 --app ATM --resdet 384 --start cold --comrot /work/noaa/epic-ps/ufs-mrw-v2.0/coupled/COMROT --expdir /work/noaa/epic-ps/ufs-mrw-v2.0/coupled/EXPDIR/C384

(assumes you built with S2SWA default build).

For coupled: 
coupled exp setup: ./setup_expt.py forecast-only --pslot 2013100100_test --idate 2013100100 --edate 2013100100 --app S2SW --resdet 384 --start cold --comrot /work/noaa/epic-ps/ufs-mrw-v2.0/coupled/COMROT --expdir /work/noaa/epic-ps/ufs-mrw-v2.0/coupled/EXPDIR/C384 --icsdir  /work/noaa/epic-ps/ufs-mrw-v2.0/coupled/ICSDIR

A run creates RUNDIRS which contains scrubbed output files. 


For uncoupled:
----------------
Edit ``config.base``
vi config.base

Change:
ACCOUNT, user-specific paths (HOMEDIR, STMP, PTMP, NOSCRUB)
Experiment-specific environment parameters:
SDATE (start), EDATE (end-->list same as start!!!), (no idea what FSTART is. don't mess.)



..
   COMMENT: data needs to be prestaged in EXPTDIR




Run experiment generator script:

.. code-block:: console

   cd ufs-mrweather-app/global-workflow/ush/rocoto
   [on Orion] module load contrib/0.1; module load rocoto/1.3.3
   [on Hera] module use -a /contrib/anaconda/modulefiles
   module load anaconda/anaconda3-5.3.1
   ./setup_expt.py forecast-only --pslot $EXP_NAME --idate YYYYMMDDCC --edate YYYYMMDDCC--resdet desired_resolution --gfs_cyc 4 --comrot $PATH_TO_YOUR_COMROT_DIR --expdir $PATH_TO_YOUR_EXPDIR


Example with ``COMROT`` and ``EXPDIR`` paths: 

.. code-block:: console

   ./setup_expt.py forecast-only --pslot test --idate 2020010100 --edate 2020010118 --resdet 384 --gfs_cyc 4 --comrot /work/noaa/stmp/cbook/COMROT --expdir /work/noaa/epic-ps/cbook/uncoupled/EXPDIR

This will generate ``$PSLOT`` (specific experiment name) folders in ``COMROT`` and ``EXPDIR``, with config files in ``$EXPDIR/$PSLOT``

Copy IC files into ``COMROT/$PSLOT``. Directory name should be like: gfs.YYYYMMDDCC, with structure: gfs.$YYYYMMDD/CC/atmos. INPUT folder within â€¦/atmos/ contains sfc files needed for GFS ATM to run.
Edit ``config.base`` in ``$EXPDIR/$PSLOT`` (``ACCOUNT``, ``HOMEDIR``, ``STMP/PTMP``, ``HPSSARCH``)

Run ``./setup_workflow_fcstonly.py --expdir $EXPDIR/$PSLOT``. This will generate crontab and ``.xml`` files for the experiment in $EXPDIR/$PSLOT.


Description of Workflow Tasks
---------------------------------

.. note::
   This section gives a general overview of workflow tasks. To begin running the workflow, skip to :numref:`Step %s <rocoto-run>`

Individual tasks that make up the workflow are specified in the ``FV3LAM_wflow.xml`` file. :numref:`Table %s <WorkflowTasksTable>` describes the function of each baseline task. The first three pre-processing tasks; ``MAKE_GRID``, ``MAKE_OROG``, and ``MAKE_SFC_CLIMO`` are optional. If the user stages pre-generated grid, orography, and surface climatology fix files, these three tasks can be skipped by adding the following lines to the ``config.sh`` file before running the ``generate_FV3LAM_wflow.sh`` script: 

.. code-block:: console

   RUN_TASK_MAKE_GRID="FALSE"
   RUN_TASK_MAKE_OROG="FALSE"
   RUN_TASK_MAKE_SFC_CLIMO="FALSE"

..
   COMMENT: Update info to match MRW App! This is all SRW. 
   COMMENT: Make an MRW App workflow chart/image similar to SRW. 


The ``setup_expt.py`` file runs the specific j-job scripts (``global-workflow/jobs/J[task_name]``) in the prescribed order when the experiment is launched via ``setup_workflow.py`` or the ``rocotorun`` command. Each j-job task has its own source script (or "ex-script") named ``ex[task_name].sh`` in the ``global-workflow/scripts`` directory. Two database files named ``FV3LAM_wflow.db`` and ``FV3LAM_wflow_lock.db`` are generated and updated by the Rocoto calls. There is usually no need for users to modify these files. To relaunch the workflow from scratch, delete these two ``*.db`` files and then call the launch script repeatedly for each task. 

..
   COMMENT: Fix above paragraph to have MRW-specific info instead of SRW!!! Verify any changes made!


.. _WorkflowTasksTable:

.. table::  Baseline workflow tasks in the SRW App

   +----------------------+------------------------------------------------------------+
   | **Workflow Task**    | **Task Description**                                       |
   +======================+============================================================+
   |                      |                                                            |
   +----------------------+------------------------------------------------------------+
   |                      |                                                            |
   +----------------------+------------------------------------------------------------+
   | run_fcst             | Run the forecast model (UFS weather model)                 |
   +----------------------+------------------------------------------------------------+
   | run_post             | Run the post-processing tool (UPP)                         |
   +----------------------+------------------------------------------------------------+

..
   COMMENT: Get workflow steps/order!!! (Look in global-workflow repo & talk to Cameron)

In addition to the baseline tasks described in :numref:`Table %s <WorkflowTasksTable>` above, users may choose to run some or all of the METplus verification tasks. These tasks are described in :numref:`Table %s <VXWorkflowTasksTable>` below. 

.. _VXWorkflowTasksTable:

.. table:: Verification (VX) workflow tasks in the SRW App

   +-----------------------+------------------------------------------------------------+
   | **Workflow Task**     | **Task Description**                                       |
   +=======================+============================================================+
   | GET_OBS_CCPA          | Retrieves and organizes hourly :term:`CCPA` data from NOAA |
   |                       | HPSS. Can only be run if ``RUN_TASK_GET_OBS_CCPA="TRUE"``  |
   |                       | *and* user has access to NOAA HPSS data.                   |
   +-----------------------+------------------------------------------------------------+
   | GET_OBS_NDAS          | Retrieves and organizes hourly :term:`NDAS` data from NOAA |
   |                       | HPSS. Can only be run if ``RUN_TASK_GET_OBS_NDAS="TRUE"``  |
   |                       | *and* user has access to NOAA HPSS data.                   |
   +-----------------------+------------------------------------------------------------+
   | GET_OBS_MRMS          | Retrieves and organizes hourly :term:`MRMS` composite      |
   |                       | reflectivity and :term:`echo top` data from NOAA HPSS. Can |
   |                       | only be run if ``RUN_TASK_GET_OBS_MRMS="TRUE"`` *and* user |
   |                       | has access to NOAA HPSS data.                              |
   +-----------------------+------------------------------------------------------------+
   | VX_GRIDSTAT           | Runs METplus grid-to-grid verification for 1-h accumulated |
   |                       | precipitation                                              |
   +-----------------------+------------------------------------------------------------+
   | VX_GRIDSTAT_REFC      | Runs METplus grid-to-grid verification for composite       |
   |                       | reflectivity                                               |
   +-----------------------+------------------------------------------------------------+
   | VX_GRIDSTAT_RETOP     | Runs METplus grid-to-grid verification for :term:`echo top`|
   +-----------------------+------------------------------------------------------------+
   | VX_GRIDSTAT_##h       | Runs METplus grid-to-grid verification for 3-h, 6-h, and   |
   |                       | 24-h (i.e., daily) accumulated precipitation. Valid values |
   |                       | of ``##`` are ``03``, ``06``, and ``24``.                  |
   +-----------------------+------------------------------------------------------------+
   | VX_POINTSTAT          | Runs METplus grid-to-point verification for surface and    |
   |                       | upper-air variables                                        |
   +-----------------------+------------------------------------------------------------+
   | VX_ENSGRID            | Runs METplus grid-to-grid ensemble verification for 1-h    |
   |                       | accumulated precipitation. Can only be run if              |
   |                       | ``DO_ENSEMBLE="TRUE"`` and ``RUN_TASK_VX_ENSGRID="TRUE"``. |
   +-----------------------+------------------------------------------------------------+
   | VX_ENSGRID_REFC       | Runs METplus grid-to-grid ensemble verification for        |
   |                       | composite reflectivity. Can only be run if                 |
   |                       | ``DO_ENSEMBLE="TRUE"`` and                                 |
   |                       | ``RUN_TASK_VX_ENSGRID = "TRUE"``.                          |
   +-----------------------+------------------------------------------------------------+
   | VX_ENSGRID_RETOP      | Runs METplus grid-to-grid ensemble verification for        |
   |                       | :term:`echo top`. Can only be run if ``DO_ENSEMBLE="TRUE"``|
   |                       | and ``RUN_TASK_VX_ENSGRID="TRUE"``.                        |
   +-----------------------+------------------------------------------------------------+
   | VX_ENSGRID_##h        | Runs METplus grid-to-grid ensemble verification for 3-h,   |
   |                       | 6-h, and 24-h (i.e., daily) accumulated precipitation.     |
   |                       | Valid values of ``##`` are ``03``, ``06``, and ``24``. Can |
   |                       | only be run if ``DO_ENSEMBLE="TRUE"`` and                  |
   |                       | ``RUN_TASK_VX_ENSGRID="TRUE"``.                            |
   +-----------------------+------------------------------------------------------------+
   | VX_ENSGRID_MEAN       | Runs METplus grid-to-grid verification for ensemble mean   |
   |                       | 1-h accumulated precipitation. Can only be run if          |
   |                       | ``DO_ENSEMBLE="TRUE"`` and ``RUN_TASK_VX_ENSGRID="TRUE"``. |
   +-----------------------+------------------------------------------------------------+
   | VX_ENSGRID_PROB       | Runs METplus grid-to-grid verification for 1-h accumulated |
   |                       | precipitation probabilistic output. Can only be run if     |
   |                       | ``DO_ENSEMBLE="TRUE"`` and ``RUN_TASK_VX_ENSGRID="TRUE"``. |
   +-----------------------+------------------------------------------------------------+
   | VX_ENSGRID_MEAN_##h   | Runs METplus grid-to-grid verification for ensemble mean   |
   |                       | 3-h, 6-h, and 24h (i.e., daily) accumulated precipitation. |
   |                       | Valid values of ``##`` are ``03``, ``06``, and ``24``. Can |
   |                       | only be run if ``DO_ENSEMBLE="TRUE"`` and                  |
   |                       | ``RUN_TASK_VX_ENSGRID="TRUE"``.                            |
   +-----------------------+------------------------------------------------------------+
   | VX_ENSGRID_PROB_##h   | Runs METplus grid-to-grid verification for 3-h, 6-h, and   |
   |                       | 24h (i.e., daily) accumulated precipitation probabilistic  |
   |                       | output. Valid values of ``##`` are ``03``, ``06``, and     |
   |                       | ``24``. Can only be run if ``DO_ENSEMBLE="TRUE"`` and      |
   |                       | ``RUN_TASK_VX_ENSGRID="TRUE"``.                            |
   +-----------------------+------------------------------------------------------------+
   | VX_ENSGRID_PROB_REFC  | Runs METplus grid-to-grid verification for ensemble        |
   |                       | probabilities for composite reflectivity. Can only be run  |
   |                       | if ``DO_ENSEMBLE="TRUE"`` and                              |
   |                       | ``RUN_TASK_VX_ENSGRID="TRUE"``.                            |
   +-----------------------+------------------------------------------------------------+
   | VX_ENSGRID_PROB_RETOP | Runs METplus grid-to-grid verification for ensemble        |
   |                       | probabilities for :term:`echo top`. Can only be run if     |
   |                       | ``DO_ENSEMBLE="TRUE"`` and ``RUN_TASK_VX_ENSGRID="TRUE"``. | 
   +-----------------------+------------------------------------------------------------+
   | VX_ENSPOINT           | Runs METplus grid-to-point ensemble verification for       |
   |                       | surface and upper-air variables. Can only be run if        |
   |                       | ``DO_ENSEMBLE="TRUE"`` and ``RUN_TASK_VX_ENSPOINT="TRUE"``.|
   +-----------------------+------------------------------------------------------------+
   | VX_ENSPOINT_MEAN      | Runs METplus grid-to-point verification for ensemble mean  |
   |                       | surface and upper-air variables. Can only be run if        |
   |                       | ``DO_ENSEMBLE="TRUE"`` and ``RUN_TASK_VX_ENSPOINT="TRUE"``.|
   +-----------------------+------------------------------------------------------------+
   | VX_ENSPOINT_PROB      | Runs METplus grid-to-point verification for ensemble       |
   |                       | probabilities for surface and upper-air variables. Can     |
   |                       | only be run if ``DO_ENSEMBLE="TRUE"`` and                  |
   |                       | ``RUN_TASK_VX_ENSPOINT="TRUE"``.                           |
   +-----------------------+------------------------------------------------------------+

.. _run-workflow:

Run the Workflow 
================================

.. _rocoto-run:

Run Using Rocoto
--------------------

Submit job through crontab by copying entry in ``$PSLOT.crontab`` into crontab via ``crontab -e``.

Monitor status of workflow using rocotostat:

.. code-block:: console

   rocotostat -d /path/to/workflow/database/file -w /path/to/workflow/xml/file [-c YYYYMMDDCCmm,[YYYYMMDDCCmm,...]] [-t taskname,[taskname,...]] [-s] [-T]

For example: 
.. code-block:: console
   
   rocotostat -d $PSLOT.db -w $PSLOT.xml

Check status of specific task/job:

.. code-block:: console

   rocotocheck -d </path/to/workflow/database/file> -w </path/to/workflow/xml/file> -c YYYYMMDDCCmm -t taskname


.. _manual-run:

Run Manually (Without Rocoto)
---------------------------------





.. _plot-output:

Plot the Output
===================
Two python scripts are provided to generate plots from the post-processed :term:`GRIB2` output. Information on how to generate the graphics can be found in :numref:`Chapter %s <graphics>`.

..
   COMMENT: Check whether plotting scripts run!!!